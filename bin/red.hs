module Main
  ( main
  ) where

import Data.List (dropWhileEnd)
import Protolude
import Text.Blaze.Html5 (Html, (!))
import qualified Text.Blaze.Html5 as H
import qualified Text.Blaze.Html5.Attributes as A
import Text.Blaze.Html.Renderer.Utf8 qualified as Utf8 (renderHtml)
import Text.HTML.TagSoup

--------------------------------------------------------------------------------
main :: IO ()
main = do
  content <- getContents
  putStr . Utf8.renderHtml $ extract content

--------------------------------------------------------------------------------

-- | Extract the code part of an HTML document generated by Neovim's TOhtml
-- function. We could simply remove all the lines of text until the first <pre>
-- and after the last </pre>, but we instead use Tagsoup and represent the end
-- result with blaze-html.
extract :: Text -> Html
extract content =
  getPreBlock content & parse & markup

--------------------------------------------------------------------------------

-- | Returns a tagsoup that should contain only the <pre>...</pre> content of
-- the page. No attempt to validate the structure of the page beforehand is
-- done.
getPreBlock :: Text -> [Tag Text]
getPreBlock content =
  parseTags content
    & canonicalizeTags
    & dropWhile (~/= (TagOpen @Text "pre" []))
    & dropWhileEnd (~/= (TagClose @Text "pre"))

--------------------------------------------------------------------------------

-- | Represent a dumb-down HTML element, but enough te represent the
-- Neovim-generated syntax highlighted code.
data Elem =
    Text Text
  | Span Text Text
  deriving Show

-- | Turn a tagsoup as obtained by "getPreBlock" to our simple HTML
-- representation.
parse :: [Tag Text] -> [Elem]
parse (TagOpen "pre" [] : rest) = go rest
 where
  go (TagText t : rst) = Text t : go rst
  go (TagOpen "span" [("class", c)] : TagText t : TagClose "span" : rst) =
    Span c t : go rst
  go (TagClose "pre" : []) = []
  go _ = panic "Unexpected Tagsoup element."
parse _ = panic "Unexpected first Tagsoup element."

--------------------------------------------------------------------------------

-- | Convert our simple HTML representation to blaze-html.
markup :: [Elem] -> Html
markup = H.pre . H.code . mconcat . map go
 where
  go (Text t) = H.text t
  go (Span c t) = H.span ! A.class_ (H.toValue c) $ H.text t
